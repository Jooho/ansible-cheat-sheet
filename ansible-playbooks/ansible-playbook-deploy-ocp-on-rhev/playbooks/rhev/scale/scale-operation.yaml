---
- hosts: localhost
  gather_facts: no
  tasks:
    - name: Ansible Controller Tasks
      block:
        - name: Update groups
          include: ./tasks/generate-host-groups.yaml
  
        - set_fact:
            target_vm_type: "{{target_vm|default('cluster')}}"
  
        - set_fact:
            vm_operate: "stopped"
          when: deploy_type == 'stop'
  
        - set_fact:
            vm_operate: "running"
          when: deploy_type == 'start'
  
        - set_fact:
            vm_operate: "absent"
          when: deploy_type == 'teardown' or deploy_type == 'scaledown'

      run_once: true
      when: inventory_hostname == 'localhost'
 

    # Scale Down OCP Node 
    - name: Scale Down for Infra
      block:
        - name: Run oc command to mark scale down node as unschedulable
          command: "oc adm cordon {{ groups.infra_nodes[0] }}"
     
        - name: Run oc command to remove all running pods from scale down node
          command: "oc adm drain {{ groups.infra_nodes[0] }} --force"
     
        - name: Wait 1m for pods to drain
          pause:
            minutes: 1
     
        - name: Run oc command to remove node from cluster
          command: "oc delete node {{ groups.infra_nodes[0] }}"
      when: deploy_type == 'scaledown' and target_vm_type == 'infra' 
      delegate_to: "{{ groups.masters.0 }}"   
   
   
    - name: Scale Down for App
      block:
        - name: Run oc command to mark scale down node as unschedulable
          command: "oc adm cordon {{ groups.app_nodes[0] }}"
     
        - name: Run oc command to remove all running pods from scale down node
          command: "oc adm drain {{ groups.app_nodes[0] }} --force"
     
        - name: Wait 1m for pods to drain
          pause:
            minutes: 1
     
        - name: Run oc command to remove node from cluster
          command: "oc delete node {{ groups.app_nodes[0] }}"
      when: deploy_type == 'scaledown' and target_vm_type == 'app' 
      delegate_to: "{{ groups.masters.0 }}"   

   
    # Tear Down/Scale - Tag Management
    - name: Remove teardowned cluster from Tag
      ovirt_tags:
        auth:
          username: "{{rhev.id}}"
          password: "{{rhev.pw}}"
          url: "{{rhev.api_url}}"
          ca_file: "{{rhev.ca_file}}"
        name: "tag_Name_{{cluster_tag}}_{{deploy_type}}_node_vms"
        state: detached
        vms: "{{ item }}"
      with_items:
        - "{{groups['tag_Name_' + cluster_tag +'_master_node_vms']}}"
        - "{{groups['tag_Name_' + cluster_tag +'_lb_node_vms']}}"
        - "{{groups['tag_Name_' + cluster_tag +'_infra_node_vms']}}"
        - "{{groups['tag_Name_' + cluster_tag +'_app_node_vms']}}"
      when: deploy_type == 'teardown' 
   
 
    - name: Remove teardowned vm from Tag
      ovirt_tags:
        auth:
          username: "{{rhev.id}}"
          password: "{{rhev.pw}}"
          url: "{{rhev.api_url}}"
          ca_file: "{{rhev.ca_file}}"
        name: "tag_Name_{{cluster_tag}}_{{deploy_type}}_node_vms"
        state: detached
        vms: "{{ item }}"
      with_items:
        - "{{groups['tag_Name_' + cluster_tag +'_{{deploy_type}}_node_vms'][0]}}"
      when: deploy_type == 'scaledown' 
    

    # Start/Stop/Tear Down/Scale RHEV VM Management
    - name: Operate for Cluster
      ovirt_vms:
        name: "{{item}}"
        cluster: "{{rhev.cluster}}"
        auth:
          username: "{{rhev.id}}"
          password: "{{rhev.pw}}"
          url: "{{rhev.api_url}}"
          ca_file: "{{rhev.ca_file}}"
        operating_system: "{{base_image.os}}_{{base_image.rhev_os_type}}"
        state: "{{ vm_operate }}"
        wait: True
      with_items:
        - "{{groups['tag_Name_' + cluster_tag +'_master_node_vms']}}"
        - "{{groups['tag_Name_' + cluster_tag +'_lb_node_vms']}}"
        - "{{groups['tag_Name_' + cluster_tag +'_infra_node_vms']}}"
        - "{{groups['tag_Name_' + cluster_tag +'_app_node_vms']}}"
      when: deploy == 'start' or deploy == 'stop'  or deploy_type == 'teardown'
    
    
    - name: Operate for Single Infra/App Node
      ovirt_vms:
        name: "{{item}}"
        cluster: "{{rhev.cluster}}"
        auth:
          username: "{{rhev.id}}"
          password: "{{rhev.pw}}"
          url: "{{rhev.api_url}}"
          ca_file: "{{rhev.ca_file}}"
        state: "{{ vm_operate }}"
        wait: True
      with_items:
        - "{{groups['tag_Name_' + cluster_tag +'_{{deploy_type}}_node_vms'][0]}}"
      when: deploy_type == 'scaledown'
 

    # Blue Green Upgrade 
    - name: Get target_cluster_groups
      block:
        - set_fact:
            target_cluster_infra: 'tag_Name_' + cluster_tag +'_infra_node_vms
            target_cluster_app: 'tag_Name_' + cluster_tag +'_app_node_vms
          when: target_cluster is not defined

        - set_fact:
            target_cluster_infra: 'tag_Name_' + cluster_tag +'_infra_node_vms_blue
            target_cluster_app: 'tag_Name_' + cluster_tag +'_app_node_vms_blue
          when: target_cluster == 'blue'
 
        - set_fact:
            target_cluster_infra: 'tag_Name_' + cluster_tag +'_infra_node_vms_green
            target_cluster_app: 'tag_Name_' + cluster_tag +'_app_node_vms_green
          when: deploy_type == 'bg_upgrade' and operate == 'teardown' and target_cluster == 'green'
      when: deploy_type == 'bg_upgrade' 
 
    - name: Operate(start/stop) for Blue Green Cluster
      ovirt_vms:
        name: "{{item}}"
        cluster: "{{rhev.cluster}}"
        auth:
          username: "{{rhev.id}}"
          password: "{{rhev.pw}}"
          url: "{{rhev.api_url}}"
          ca_file: "{{rhev.ca_file}}"
        operating_system: "{{base_image.os}}_{{base_image.rhev_os_type}}"
        state: "{{ vm_operate }}"
        wait: True
      with_items:
        - "{{groups['tag_Name_' + cluster_tag +'_infra_node_vms_{{target|default(omit)}}']}}"
        - "{{groups['tag_Name_' + cluster_tag +'_app_node_vms']}}"
      when: deploy_type == 'bg_upgrade' and (operate == start' or operate == stop')
 
    # Teardown Down OCP Node 
    - name: Operate(teardown) for Blue Green Cluster
      block:
        - name: Run oc command to mark scale down node as unschedulable
          command: "oc adm cordon {{ groups.infra_nodes[0] }}"
     
        - name: Run oc command to remove all running pods from scale down node
          command: "oc adm drain {{ groups.infra_nodes[0] }} --force"
     
        - name: Wait 1m for pods to drain
          pause:
            minutes: 1
     
        - name: Run oc command to remove node from cluster
          command: "oc delete node {{ groups.infra_nodes[0] }}"
      when: deploy_type == 'scaledown' and target_vm_type == 'infra' 
      delegate_to: "{{ groups.masters.0 }}"   
      when: deploy_type == 'bg_upgrade' and operate == 'teardown'
   
   
