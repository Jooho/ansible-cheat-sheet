---
- name: install dnsmasq package
  yum: 
    name: dnsmasq
    state: present

- name: Clean OCP Configuration
  file: 
    path: /etc/dnsmasq.d/ocp-{{cluster_tag}}.conf
    state: absent
  when: interim_dns.rewrite_conf is defined and interim_dns.rewrite_conf 

- name: Clean Master Internal Hostname in /etc/hosts
  lineinfile:
    path: /etc/hosts
    state: absent
    regexp: "{{ocp_master_cluster_hostname}}"
  when: interim_dns.rewrite_conf is defined and interim_dns.rewrite_conf 

- name: Get IPs from Masters
  shell: "host {{item}}|awk '{print $NF}'"
  register: masters_ip
  with_items: 
    - "{{ groups.masters }}"
  until: masters_ip.stdout != ''
  ignore_errors: yes
  delay: 10
  retries: 100
  when: master_node_vms is defined and master_node_vms|int > 0 and deploy_type == 'ocp'

- name: Add IPs of Masters into Memory
  add_host:
    name: "{{item.stdout}}"
    groups: master_nodes_ip
  with_items: "{{masters_ip.results}}"
  when: master_node_vms is defined and master_node_vms|int > 0 and deploy_type == 'ocp'

- name: Get IPs from Infra Nodes
  shell: "host {{item}}|awk '{print $NF}'"
  register: infras_ip
  with_items: 
   - "{{ groups.infra_nodes }}"
  until: infras_ip.stdout != ''
  ignore_errors: yes
  delay: 10
  retries: 100
  when: infra_node_vms is defined and infra_node_vms|int > 0 and deploy_type == 'ocp'

- name: Add IPs of Infra into Memory
  add_host:
    name: "{{item.stdout}}"
    groups: infra_nodes_ip
  with_items: "{{ infras_ip.results}}"
  when: infra_node_vms is defined and infra_node_vms|int > 0 and deploy_type == 'ocp'

- name: Get IPs from App Nodes for Infra (when infra nodes does not exist)
  shell: "host {{item}}|awk '{print $NF}'"
  register: apps_ip
  with_items: 
    - "{{ groups.app_nodes }}"
  until: apps_ip.stdout != ''
  ignore_errors: yes
  delay: 10
  retries: 100
  when: ((infra_node_vms is not defined) or (infra_node_vms is defined and infra_node_vms == 0)) and (app_node_vms is defined and app_node_vms|int > 0 and deploy_type == "ocp")
  
- name: Add IPs of App for Infra into Memory (when infra nodes does not exist)
  add_host:
    name: "{{item.stdout}}"
    groups: infra_nodes_ip
  with_items: "{{ apps_ip.results }}"
  when: ((infra_node_vms is not defined) or (infra_node_vms is defined and infra_node_vms == 0)) and (app_node_vms is defined and app_node_vms|int > 0 and deploy_type == "ocp")

- name: Get IPs from App Nodes
  shell: "host {{item}}|awk '{print $NF}'"
  register: apps_ip
  with_items: 
    - "{{ groups.app_nodes }}"
  until: apps_ip.stdout != ''
  ignore_errors: yes
  delay: 10
  retries: 100
  when: app_node_vms is defined and app_node_vms|int > 0 and deploy_type == "ocp" 
  
- name: Add IPs of App into Memory
  add_host:
    name: "{{item.stdout}}"
    groups: app_nodes_ip
  with_items: "{{ apps_ip.results }}"
  when: app_node_vms is defined and app_node_vms|int > 0 and deploy_type == "ocp" 

- name: Copy dnsmasq conf - forwarder.conf
  template: src=forwarder.conf.j2 dest=/etc/dnsmasq.d/forwarder.conf

- name: Copy dnsmasq conf - ocp_conf
  template: src=ocp.conf.j2 dest=/etc/dnsmasq.d/ocp-{{cluster_tag}}.conf
  when: deploy_type == "ocp"




# Scaling up
- name: Add new infra node - ocp_conf
  lineinfile:
    path: /etc/dnsmasq.d/ocp-{{cluster_tag}}.conf
    line: "address=/{{ocp_cluster_subdomain}}/{{item}}"
  with_items:
    - "{{ groups.infra_nodes_ip }}"
  when: deploy_type == 'scale' and operate == 'up' and scale_target == 'infra'


- name: Scaling down
  block:
    - name: Get IPs from Scaledown Infra Nodes
      shell: "host {{item}}|awk '{print $NF}'"
      register: scaledown_nodes_ip
      with_items:
       - "{{ groups.scaledown_nodes_vms }}"
      until: infras_ip.stdout != ''
      ignore_errors: yes
      delay: 10
      retries: 100

    - name: Add IPs of Scaledown Infra into Memory
      add_host:
        name: "{{item.stdout}}"
        groups: scaledown_nodes_ip
      with_items: "{{ scaledown_nodes_ip.results}}"
    
    - name: Delete Scale down infra node - ocp_conf
      lineinfile:
        path: /etc/dnsmasq.d/ocp-{{cluster_tag}}.conf
        line: "address=/{{ocp_cluster_subdomain}}/{{item}}"
        state: absent
      with_items:
        - "{{ groups.scaledown_nodes_ip }}"

  when: deploy_type == 'scale' and operate == 'down' and scale_target == 'infra'

#- name: Check if Masters IP exist
#  command: grep {{item}} /etc/hosts
#  with_items:
#    - "{{ groups.master_nodes_ip }}"
#  register: ip_exist_in_hosts
#  ignore_errors: yes
#  when: master_node_vms is defined and master_node_vms|int > 0 and deploy_type == "ocp_cluster"

#- name: Insert Masters IP into /etc/hosts for round robin
#  lineinfile:
#    path: /etc/hosts
#    line: "{{item.item}} {{ocp_master_cluster_hostname}}"
#  with_items:
#    - "{{ ip_exist_in_hosts.results }}"
#  when: deploy_type == "ocp_cluster" and master_node_vms is defined and master_node_vms|int > 0 and item.rc == 1 

- name: Restart dnsmasq
  service:
    name: dnsmasq
    state: restarted

